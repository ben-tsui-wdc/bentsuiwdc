# -*- coding: utf-8 -*-
""" Test cases to check [ANALYTICS] Factory reset log generated by platform should be uploaded.
"""
__author__ = "Ben Lin <ben.lin@wdc.com>"

# std modules
import sys
import time


# platform modules
from middleware.arguments import InputArgumentParser
from middleware.test_case import TestCase
from platform_libraries.sumologicAPI import sumologicAPI
from platform_libraries.restAPI import RestAPI


class SumologicPlatformFactoryReset(TestCase):

    TEST_SUITE = 'Functional_Tests'
    TEST_NAME = '[ANALYTICS] Factory reset log generated by platform should be uploaded'
    # Popcorn
    TEST_JIRA_ID = 'KAM-19769'

    SETTINGS = {
        'uut_owner': False
    }

    def init(self):
        self.pip = True
        self.url_exist = False
        self.holding = True
        self.sumoURL = ""
        self.logname = ""
        self.jobID = ""
        self.counter = 0
        self.sumologicAPI = sumologicAPI()


    def declare(self):
        self.timeout = 300


    def before_test(self):
        if 'yoda' in self.uut.get('model'):
            interface = 'wlan0'
        else:
            interface = 'eth0'
        MAX_RETRIES = 3
        retry = 1
        while retry <= MAX_RETRIES:
            self.mac_address_hash = self.adb.get_hashed_mac_address(interface=interface)
            if not self.mac_address_hash:
                self.log.warning("Failed to get mac address, remaining {} retries".format(retry))
                time.sleep(10)
                retry += 1
            else:
                break
        if not self.mac_address_hash:
            raise self.err.TestFailure("Failed to get mac address, remaining {} retries".format(MAX_RETRIES))


    def test(self):
        # Do factory reset, no connect to network
        self.factory_reset()

        if 'yoda' in self.uut.get('model'):
        # Attention: "/wd_config/factory_reset.log" will disappear when ibi connected to network even if it is not onboarding yet.
        # However, MCH doesn't have this restriction.
            self.serial_client.serial_write('find /wd_config/ -name factory_reset.log')
            if not self.serial_client.serial_wait_for_string('/wd_config/factory_reset.log'):
                self.log.warning("Check {} failed!".format("/wd_config/factory_reset.log"))
            if self.env.ap_ssid:
                ap_ssid = self.env.ap_ssid
                ap_password = self.env.ap_password
            else:
                ap_ssid = 'private_5G'
                ap_password = 'automation'
            self.serial_client.setup_and_connect_WiFi(ssid=ap_ssid, password=ap_password, restart_wifi=True)
        elif 'pelican' not in self.uut.get('model'):
            stdout, stderr = self.adb.executeShellCommand('find /wd_config/ -name factory_reset.log')
            if stdout.strip() != '/wd_config/factory_reset.log':
                self.log.warning("Check {} failed!".format("/wd_config/factory_reset.log"))

        # onboard and check log from sumologic.
        self.uut_owner = RestAPI(uut_ip=self.env.uut_ip, env=self.env.cloud_env, username=self.env.username, password=self.env.password, client_settings={'config_url': self.uut['config_url']})

        # upload log
        self.adb.executeShellCommand("move_upload_logs.sh -a")
        self.adb.executeShellCommand("move_upload_logs.sh -n")
        self.log.info("Wait 600 seconds for uploading log to sumo...")
        time.sleep(600)

        sumo_des = '_sourceName={} AND factory_reset AND crashreport'.format(self.mac_address_hash)
        self.log.info("Searching rule: %s" %sumo_des)
        try:
            self.result = self.sumologicAPI.searchRQ(_adb_client=self.adb, searching=sumo_des, relativeTime=13, timezone="GMT")
            self.counter = int(self.result["messageCount"])
            self.log.info(self.result)
        except Exception as ex:
            self.log.error("Failed to send sumologic API: {}".format(ex))
            raise self.err.TestFailure("Test failed related to sumologicAPI method.")

        if self.counter <= 0:
            self.log.error("Test: Failed. Cannot find the log in sumologic website.")
            raise self.err.TestFailure("Test: Failed, log file is not found in sumologic database.")
        else:
            self.log.info("Test: pass")


    def factory_reset(self):
        self.adb.executeShellCommand('busybox nohup reset_button.sh factory', _no_resend=True)   
        self.log.info('Expect device do rebooting ...')
        if 'yoda' in self.uut.get('model'):
            self.serial_client.serial_wait_for_string('init: stopping android....', timeout=60*10, raise_error=True)
        if not self.adb.wait_for_device_to_shutdown():
            raise self.err.TestFailure('Device rebooting Failed !!')
        self.log.info('Device rebooting ...')
        if 'yoda' in self.uut.get('model'):
            self.serial_client.serial_wait_for_string('Hardware name: Realtek_RTD1295', timeout=60*10, raise_error=False)
            self.serial_client.wait_for_boot_complete(timeout=self.timeout)
        else:  # For Monarch/Pelican, wait for golden mode reboot. Pelican needs moe time to do mke2fs
            time.sleep(180)
            self._check_restsdk_service()


    def _check_restsdk_service(self):
        start_time = time.time()
        while (time.time() - start_time) < 1800:
            # Execute command to check restsdk is running and device connected to localhost.
            stdout, stderr = self.adb.executeShellCommand('ps | grep restsdk')
            if 'restsdk-server' in stdout:
                self.log.info('Restsdk-server is running\n')
                break
            time.sleep(30)
        time.sleep(60)
        stdout, stderr = self.adb.executeShellCommand('curl localhost/sdk/v1/device')
        if 'Connection refused' in stdout:
            raise self.err.TestFailure("Connected to localhost failed !!")


if __name__ == '__main__':
    parser = InputArgumentParser("""\
        *** [ANALYTICS] Factory reset log generated by platform should be uploaded Check Script ***
        Examples: ./run.sh functional_tests/sumologic_platform_factory_reset_log_generated.py --uut_ip 10.92.224.68\
        """)

    test = SumologicPlatformFactoryReset(parser)
    resp = test.main()
    print 'test response: {}'.format(resp)
    if resp:
        sys.exit(0)
    sys.exit(1)
